(define (full-adder a b c-in sum c-out)
  (let ((s (make-wire))
        (c1 (make-wire))
        (c2 (make-wire)))
    (half-adder b c-in s c1)
    (half-adder a s sum c2)
    (or-gate c1 c2 c-out)
    'ok))

(define (ripple-carry-adder a-wires b-wires s-wires c)
  (if (or (= '() a-wires) (= '() b-wires) (= '() s-wires))
      (set-signal! c 0)
      (let (c-out (make-wire))
        (full-adder (car a-wires) (car b-wires) c (car s-wires) c-out)
        (ripple-carry-adder (cdr a-wires) (cdr b-wires) (cdr s-wires) c-out))))
